{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled36.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZjhdjqT25MnP"
      },
      "source": [
        "import numpy as np\r\n",
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vA2DVrdrElOV"
      },
      "source": [
        "#loading datasets------------------------\r\n",
        "x_train = pd.read_csv(\"drive/MyDrive/mnist/Train_Data.csv\").to_numpy()\r\n",
        "y_train = pd.read_csv(\"drive/MyDrive/mnist/Train_labels.csv\").to_numpy()\r\n",
        "x_test = pd.read_csv(\"drive/MyDrive/mnist/Test_Data.csv\").to_numpy()\r\n",
        "y_test = pd.read_csv(\"drive/MyDrive/mnist/Test_labels.csv\").to_numpy()\r\n",
        "#----------------------------------------\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pvK-ODswEoys"
      },
      "source": [
        "#-------------------------------------------------------------------------------\r\n",
        "def KNN(x_train,y_train,x):\r\n",
        "  n_samples = x_train.shape[0]\r\n",
        "  dists = np.zeros((n_samples,1))\r\n",
        "  for i in range(n_samples):\r\n",
        "    dists[i,0] = np.linalg.norm(x - x_train[i]) #euclidean norm\r\n",
        "\r\n",
        "  t = np.argsort(dists[:,0]) #sort indices based on calculated distances ascendingly\r\n",
        " \r\n",
        "  y_pred = np.zeros((3,1)) #reserve three placeholder for k = 1, 3, 5\r\n",
        "\r\n",
        "  y_pred[0] = int(y_train[int(t[0])]) # k = 1 Nearset Neighbor\r\n",
        "\r\n",
        "#-------------------------(K = 3)------------------------------\r\n",
        "  #counting occurance of classes in top 3 nearset neighbors\r\n",
        "  freq = np.zeros((10,1)) \r\n",
        "  k = 3\r\n",
        "  for i in range(k): # k = 3\r\n",
        "    freq[int(y_train[t[i]])] += 1\r\n",
        "\r\n",
        "  #sort class indices base on number of occurance\r\n",
        "  freq_arg = np.argsort(freq[:,0]) #ascending\r\n",
        "  freq_arg = freq_arg[::-1] #turns to descending\r\n",
        "  y_pred[1] = freq_arg[0] #pick majory \r\n",
        "#-----------------------------------------------------------------\r\n",
        "\r\n",
        "#------------------------(K = 5)----------------------------------\r\n",
        "\r\n",
        "  freq = np.zeros((10,1))\r\n",
        "  k = 5\r\n",
        "  for i in range(k):\r\n",
        "    freq[int(y_train[t[i]])] += 1\r\n",
        "  \r\n",
        "  freq_arg = np.argsort(freq[:,0])\r\n",
        "  freq_arg = freq_arg[::-1]\r\n",
        "  y_pred[2] = freq_arg[0]\r\n",
        "#-----------------------------------------------------------------\r\n",
        "  return y_pred #end KNN function\r\n",
        "#-------------------------------------------------------------------------------\r\n",
        "\r\n",
        "#--------------------------Compute accuracy-------------------------------------\r\n",
        "def evaluate(y_pred,y_test):\r\n",
        "  n_samples = y_pred.shape[0]\r\n",
        "  n_corrects = 0\r\n",
        "  for i in range(n_test_samples):\r\n",
        "    if(y_pred[i] == y_test[i]):\r\n",
        "      n_corrects += 1\r\n",
        "  acc = n_corrects / n_samples\r\n",
        "  return acc\r\n",
        "#-------------------------------------------------------------------------------\r\n",
        "  \r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tWcdacNMForA",
        "outputId": "951e7a55-d20b-4ef9-89be-9324ad41fdaf"
      },
      "source": [
        "#------------------------------------PROBLEM 3----------------------------\r\n",
        "n_test_samples = x_test.shape[0]\r\n",
        "y_pred = np.zeros((n_test_samples,3))\r\n",
        "\r\n",
        "for i in range(n_test_samples):\r\n",
        "  y_pred[i] = KNN(x_train,y_train,x_test[i]).reshape((3,))\r\n",
        "\r\n",
        "print(\"Accuracy for k = 1:\\t\",evaluate(y_pred[:,0],y_test))\r\n",
        "print(\"Accuracy for k = 3:\\t\",evaluate(y_pred[:,1],y_test))\r\n",
        "print(\"Accuracy for k = 5:\\t\",evaluate(y_pred[:,2],y_test))\r\n",
        "#-------------------------------------------------------------------------\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy for k = 1:\t 0.9247699079631853\n",
            "Accuracy for k = 3:\t 0.9123649459783914\n",
            "Accuracy for k = 5:\t 0.9067627050820328\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}