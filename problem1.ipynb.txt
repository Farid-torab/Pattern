{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled34.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "LJTnYra2_TkQ"
      },
      "source": [
        "import numpy as np\r\n",
        "import pandas as pd\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7EkfHzI6AMB2"
      },
      "source": [
        "#loading datasets------------------------\r\n",
        "x_train = pd.read_csv(\"drive/MyDrive/mnist/Train_Data.csv\").to_numpy()\r\n",
        "y_train = pd.read_csv(\"drive/MyDrive/mnist/Train_labels.csv\").to_numpy()\r\n",
        "x_test = pd.read_csv(\"drive/MyDrive/mnist/Test_Data.csv\").to_numpy()\r\n",
        "y_test = pd.read_csv(\"drive/MyDrive/mnist/Test_labels.csv\").to_numpy()\r\n",
        "#----------------------------------------"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ha345Y82DbOP"
      },
      "source": [
        "#----------------Rectangular window---------------\r\n",
        "def rect_win(x,x_i,h):\r\n",
        "  n_features = x.shape[0]\r\n",
        "  for i in range(n_features):\r\n",
        "    dist = np.abs((x[i] - x_i[i]) / h)\r\n",
        "    if(dist > 0.5):\r\n",
        "      return 0\r\n",
        "  return 1\r\n",
        "#-------------------------------------------------\r\n",
        "\r\n",
        "#----------------Gaussian window------------------\r\n",
        "#zero mean and unit variance\r\n",
        "def gaussian_win(x,x_i,h):\r\n",
        "  euclid_dist = np.dot(x - x_i,x - x_i) / (2*h**2)\r\n",
        "  exp = np.exp(- euclid_dist)\r\n",
        "  exp /= np.pi\r\n",
        "  return exp\r\n",
        "#-------------------------------------------------\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "buKweb5JLSpe"
      },
      "source": [
        "#----------------------Parazen----------------------\r\n",
        "#computes p(x|wi)\r\n",
        "def parazen_method(x_train,y_train,x,h,window):\r\n",
        "  n_samples = x_train.shape[0]\r\n",
        "  n_features = x_train.shape[1]\r\n",
        "  probs = np.zeros((10,1)) #place holder for p(x|wi)\r\n",
        "  \r\n",
        "  #V = h** n_features\r\n",
        "  for i in range(n_samples):\r\n",
        "    x_i = x_train[i]\r\n",
        "    y_i = int(y_train[i][0])\r\n",
        "    probs[y_i] += window(x_i,x,h) \r\n",
        "  \r\n",
        "  return probs\r\n",
        "#--------------------------------------------------\r\n",
        "\r\n",
        "#-------------Bayesian Classifier-----------------\r\n",
        "# p(wi|x) > p(wj|x) for all i != j --> choose wi\r\n",
        "# p(wi|x) = p(x|wi)*p(wi)/p(x)\r\n",
        "# assuiming equal prior (p(wi) = 0.1 for (1 <= i <= 10)) then\r\n",
        "# bayesian classifier becomes : p(x|wi) > p(x|wj) for all i != j --> choose wi\r\n",
        "\r\n",
        "def bayes_classifier(probs):\r\n",
        "  return np.argmax(probs)\r\n",
        "\r\n",
        "#-------------------------------------------------\r\n",
        "def evaluate(y_test,y_pred):\r\n",
        "  n_samples = y_pred.shape[0]\r\n",
        "  n_correct = 0;\r\n",
        "  for i in range(n_samples):\r\n",
        "    if(y_test[i]== y_pred[i]):\r\n",
        "      n_correct += 1\r\n",
        "\r\n",
        "  acc = n_correct / n_samples\r\n",
        "  return acc\r\n",
        "  #-------------------------------------------------\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o0e3oFjnT-7b"
      },
      "source": [
        "#---------------------------Problem #1--------------------------------\r\n",
        "\r\n",
        "#helper function---------------\r\n",
        "def classify(h,window):\r\n",
        "  n_test_samples = x_test.shape[0]\r\n",
        "\r\n",
        "  y_pred = np.zeros((n_test_samples,1))\r\n",
        "  for i in range(n_test_samples):\r\n",
        "    probs = parazen_method(x_train,y_train,x_test[i],h,window)\r\n",
        "    y_pred[i] = bayes_classifier(probs)\r\n",
        "  acc = evaluate(y_test,y_pred)\r\n",
        "  return acc\r\n",
        "#------------------------------\r\n",
        "\r\n",
        "#-------------------------------\r\n",
        "#compute accuracy for h = 1.5,1.6,1.7,1.8 and rectangular window\r\n",
        "rect_acc = np.zeros((4,1))\r\n",
        "rect_acc[0] = classify(1.5,rect_win)\r\n",
        "rect_acc[1] = classify(1.6,rect_win)\r\n",
        "rect_acc[2] = classify(1.7,rect_win)\r\n",
        "rect_acc[3] = classify(1.8,rect_win)\r\n",
        "#---------------------------------\r\n",
        "\r\n",
        "#compute accuracy for h = 0.1,0.5,0.6,0.7 and rectangular window\r\n",
        "gaus_acc = np.zeros((4,1))\r\n",
        "gaus_acc[0] = classify(0.1,gaussian_win)\r\n",
        "gaus_acc[1] = classify(0.5,gaussian_win)\r\n",
        "gaus_acc[2] = classify(0.6,gaussian_win)\r\n",
        "gaus_acc[3] = classify(0.7,gaussian_win)\r\n",
        "#---------------------------------\r\n",
        "\r\n",
        "#----------------------------------------------------------------------------\r\n",
        "\r\n",
        "\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u1Gxa6EhLXnr",
        "outputId": "a3367335-597e-4493-d855-ae05e9bbc29b"
      },
      "source": [
        "print(\"Rectangular window with h = 1.5 :\")\r\n",
        "print(\" acc = \",rect_acc[0][0],\"%\")\r\n",
        "print(\"Rectangular window with h = 1.6 :\")\r\n",
        "print(\" acc = \",rect_acc[1][0],\"%\")\r\n",
        "print(\"Rectangular window with h = 1.7 :\")\r\n",
        "print(\" acc = \",rect_acc[2][0],\"%\")\r\n",
        "print(\"Rectangular window with h = 1.8 :\")\r\n",
        "print(\" acc = \",rect_acc[3][0],\"%\")\r\n",
        "\r\n",
        "print(\"Gaussian window with h = 0.1 :\")\r\n",
        "print(\" acc = \",gaus_acc[0][0],\"%\")\r\n",
        "print(\"Gaussian window with h = 0.5 :\")\r\n",
        "print(\" acc = \",gaus_acc[1][0],\"%\")\r\n",
        "print(\"Gaussian window with h = 0.6 :\")\r\n",
        "print(\" acc = \",gaus_acc[2][0],\"%\")\r\n",
        "print(\"Gaussian window with h = 0.7 :\")\r\n",
        "print(\" acc = \",gaus_acc[3][0],\"%\")\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Rectangular window with h = 1.5 :\n",
            " acc =  0.7963185274109644 %\n",
            "Rectangular window with h = 1.6 :\n",
            " acc =  0.8303321328531412 %\n",
            "Rectangular window with h = 1.7 :\n",
            " acc =  0.8127250900360145 %\n",
            "Rectangular window with h = 1.8 :\n",
            " acc =  0.7607042817126851 %\n",
            "Gaussian window with h = 0.1 :\n",
            " acc =  0.9247699079631853 %\n",
            "Gaussian window with h = 0.5 :\n",
            " acc =  0.9223689475790317 %\n",
            "Gaussian window with h = 0.6 :\n",
            " acc =  0.9147659063625451 %\n",
            "Gaussian window with h = 0.7 :\n",
            " acc =  0.898359343737495 %\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}