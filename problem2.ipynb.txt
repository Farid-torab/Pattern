{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled35.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "gKx9b0vFMimT"
      },
      "source": [
        "import numpy as np\r\n",
        "import pandas as pd\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gr3JfHgCO_PR"
      },
      "source": [
        "#loading datasets------------------------\r\n",
        "x_train = pd.read_csv(\"drive/MyDrive/mnist/Train_Data.csv\").to_numpy()\r\n",
        "y_train = pd.read_csv(\"drive/MyDrive/mnist/Train_labels.csv\").to_numpy()\r\n",
        "x_test = pd.read_csv(\"drive/MyDrive/mnist/Test_Data.csv\").to_numpy()\r\n",
        "y_test = pd.read_csv(\"drive/MyDrive/mnist/Test_labels.csv\").to_numpy()\r\n",
        "#----------------------------------------"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "359n68ZTPIko"
      },
      "source": [
        "\r\n",
        "#-------------------top3_Neighbour_points----------------\r\n",
        "#returns top 3 nearset points to a given point x among training points \r\n",
        "\r\n",
        "def top3_Neighbour_points(x_train,y_train,x):\r\n",
        "  \r\n",
        "  n_samples = x_train.shape[0]\r\n",
        "\r\n",
        "  dists = np.zeros((10,3)) #placeholder for top 3 smallest distances in each of 10 classes\r\n",
        "  dists.fill(float('inf')) #fills all dists elements with float infinity (**) (Line 23)\r\n",
        "\r\n",
        "  for i in range(n_samples):\r\n",
        "    x_i = x_train[i]\r\n",
        "    y_i = int(y_train[i])\r\n",
        "\r\n",
        "    dist = np.linalg.norm(x - x_i)\r\n",
        "    if(dists[y_i][2] <= dist): # (**) initial values of dists must be greater than any possible distance ! (Line 17) \r\n",
        "      continue\r\n",
        "    else:\r\n",
        "      dists[y_i][2] = dist\r\n",
        "      if(dists[y_i][1] > dist):\r\n",
        "        dists[y_i][1],dists[y_i][2] = dists[y_i][2],dists[y_i][1] #swap\r\n",
        "      if(dists[y_i][0] > dist):\r\n",
        "        dists[y_i][0],dists[y_i][1] = dists[y_i][1],dists[y_i][0] #swap\r\n",
        "\r\n",
        "  return dists\r\n",
        "#----------------------------------------------------------\r\n",
        "\r\n",
        "#--------------------KNN_estimator-------------------------\r\n",
        "def KNN_estimator(NNpoints):\r\n",
        "  probs = np.zeros((10,3))\r\n",
        "\r\n",
        "  #common constants have been eliminated\r\n",
        "  for i in range(10):\r\n",
        "    probs[i][0] = 1 / NNpoints[i][0]\r\n",
        "    probs[i][1] = 1 / NNpoints[i][1]\r\n",
        "    probs[i][2] = 1 / NNpoints[i][2]\r\n",
        "\r\n",
        "  return probs;\r\n",
        "#-----------------------------------------------------------\r\n",
        "\r\n",
        "#---------------------bayes_classifier----------------------\r\n",
        "#decides based on MAP\r\n",
        "def bayes_classifier(probs):\r\n",
        "  preds = np.zeros((3,1))\r\n",
        "  preds[0][0] = np.argmax(probs[:,0])\r\n",
        "  preds[1][0] = np.argmax(probs[:,1])\r\n",
        "  preds[2][0] = np.argmax(probs[:,2])\r\n",
        "\r\n",
        "  return preds\r\n",
        "#------------------------------------------------------------\r\n",
        "\r\n",
        "#--------------------------evaluate--------------------------\r\n",
        "def evaluate(y_pred,y_test):\r\n",
        "\r\n",
        "  n_samples = y_test.shape[0]\r\n",
        "  n_corrects = 0\r\n",
        "\r\n",
        "  for i in range(n_samples):\r\n",
        "    if(y_pred[i] == y_test[i]):\r\n",
        "      n_corrects += 1\r\n",
        "\r\n",
        "  acc = n_corrects / n_samples\r\n",
        "  return acc\r\n",
        "#------------------------------------------------------------\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6b6Ovq1pXzbg",
        "outputId": "e94d8a96-723d-40c1-c469-180f8f6beece"
      },
      "source": [
        "a = 2\r\n",
        "b = 3\r\n",
        "print(a,b)\r\n",
        "a,b = b,a\r\n",
        "print(a,b)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2 3\n",
            "3 2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rPD-IzR4kaEZ"
      },
      "source": [
        "#--------------------PROBLEM #2-----------------------------\r\n",
        "n_test_samples = x_test.shape[0]\r\n",
        "y_pred = np.zeros((n_test_samples,3))\r\n",
        "\r\n",
        "#loop through all test points---------------\r\n",
        "for i in range(n_test_samples):\r\n",
        "  top3_dists = top3_Neighbour_points(x_train,y_train,x_test[i]) #find top 3 NN\r\n",
        "  probs = KNN_estimator(top3_dists) #computes probabilities based on top 3 NN\r\n",
        "  preds = bayes_classifier(probs) #MAP prediction \r\n",
        "  y_pred[i] = preds.reshape((3,)) #accuracy evaluation\r\n",
        "#-------------------------------------------\r\n",
        "\r\n",
        "\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a8Y8aCi1m-zw",
        "outputId": "f1498f88-58e0-4756-9efa-3873643f578e"
      },
      "source": [
        "#----------------------------RESULTS-------------------\r\n",
        "acck1 = evaluate(y_pred[:,0],y_test)\r\n",
        "acck2 = evaluate(y_pred[:,1],y_test)\r\n",
        "acck3 = evaluate(y_pred[:,2],y_test)\r\n",
        "\r\n",
        "print(\"Accuracy for k = 1:\\t\",acck1,\"%\")\r\n",
        "print(\"Accuracy for k = 2:\\t\",acck2,\"%\")\r\n",
        "print(\"Accuracy for k = 3:\\t\",acck3,\"%\")\r\n",
        "#------------------------------------------------------"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy for k = 1:\t 0.9247699079631853 %\n",
            "Accuracy for k = 2:\t 0.9111644657863145 %\n",
            "Accuracy for k = 3:\t 0.9079631852741097 %\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}